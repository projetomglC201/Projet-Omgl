   --
   -- No longer used since there are no replacements in it and so
   -- the code can just be written straight into the main io template.
   -- 
   procedure Delete( where_Clause : String ) is
      ps : sql.SQLHDBC := sql.SQL_NULL_HANDLE;
      connection : dodbc.Database_Connection := get_connection;
      query : Unbounded_String := DELETE_PART & To_Unbounded_String(" ");
   begin
      begin -- exception block
         query := query & where_Clause;
         Logger.info( "delete; executing query" & query );
         ps := dodbc.Initialise_Prepared_Statement( connection.connection, query );       
         SQLExecute( ps );
         Logger.info( "delete; execute query OK" );
      exception
         when No_Data => Null; -- ignore no data exceptions
         when Error : others =>
            Logger.error( "delete; execute query failed with message " & Exception_Information(Error)  );
            -- Raise_Exception( d.DB_Exception'Identity, 
               -- "delete: exception thrown " & Exception_Information(Error) );
	Reraise_Occurrence(Error);

      end;
      -- 
      begin -- close block
         dodbc.Close_Prepared_Statement( ps );
         dodbc.Disconnect( connection );
      exception
         when Error : others =>
            Logger.error( "delete/close exception" & Exception_Information(Error)  );
            -- Raise_Exception( d.DB_Exception'Identity, 
              -- "delete/close exception" & Exception_Information(Error) );
	Reraise_Occurrence(Error);

      end;
   end Delete;

