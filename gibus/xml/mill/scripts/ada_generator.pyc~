ï¿½ï¿½
ï¿½Nï¿½Hc           @   s{  d  Z  d d k l Z d d k Z d d k l Z d d k l Z d d k l	 Z	 l
 Z
 l Z l Z d Z
 d ï¿½  Z d	 ï¿½  Z d
 ï¿½  Z d ï¿½  Z d ï¿½  Z d
 ï¿½  Z e d ï¿½ Z d ï¿½  Z d ï¿½  Z d ï¿½  Z d ï¿½  Z d ï¿½  Z d ï¿½  Z d ï¿½  Z d ï¿½  Z d ï¿½  Z d ï¿½  Z d ï¿½  Z  d ï¿½  Z! d ï¿½  Z" d ï¿½  Z# d ï¿½  Z$ d ï¿½  Z% d ï¿½  Z& d  ï¿½  Z' d! ï¿½  Z( d" ï¿½  Z) d# ï¿½  Z* d$ ï¿½  Z+ d% ï¿½  Z, d& ï¿½  Z- d' ï¿½  Z. d( ï¿½  Z/ d) ï¿½  Z0 d* ï¿½  Z1 d+ ï¿½  Z2 d, ï¿½  Z3 d- ï¿½  Z4 d. ï¿½  Z5 d/ ï¿½  Z6 d0 ï¿½  Z7 d1 ï¿½  Z8 d2 ï¿½  Z9 d3 ï¿½  Z: d4 ï¿½  Z; d5 ï¿½  Z< d6 ï¿½  Z= d7 ï¿½  Z> d8 ï¿½  Z? d9 ï¿½  Z@ d: ï¿½  ZA d; ï¿½  ZB d< ï¿½  ZC d= ï¿½  ZD d> ï¿½  ZE d? ï¿½  ZF d@ ï¿½  ZG dA ï¿½  ZH d S(B   sc
 code to generate our ada .ads and .adb files, using Cheetah templating system
 for the most part
iï¿½ï¿½ï¿½ï¿½(   t   TemplateN(   t
   WORKING_PATHS(   t
   DataSource(   t
   makePluralt	   adafyNamet   makePaddedStringt   INDENTix   c         C   s   d |  i  d | } | S(   Ns   procedure Add_sA   _To_Orderings( c : in out d.Criteria; direction : d.Asc_Or_Desc )(   t   adaName(   t   vart   endingt   s(    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeAddOrderingColumnDecl'   s    c         C   s`   t  d t i d ï¿½ } t |  d ï¿½ | _ d |  i d | _ d |  i d | _ t	 | ï¿½ } | S(   Nt   files#   add_to_criterion_ordering.func.tmpls    iss7   elem : d.Order_By_Element := d.Make_Order_By_Element( "s   ", direction  )t   Add_t
   _To_Orderings(
   R    R   t
   templatesPathR   t   headert   varnamet	   criterionR   t   functionNamet   str(   R   t   templateR
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeAddOrderingColumnBody+   s    c         C   s	   d GHd  S(   Nt    (    (   t   table(    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeUpdateStatement3   s    c         C   s   d |  i  d } d  S(   Ns   insert into s	    values( (   t   name(   R   R
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeInsertStatement7   s    c         C   sC   | o
 d } n
 |  i  ï¿½  } d |  i d |  i d | d | S(   Nt   Strings   procedure Add_s   ( c : in out d.Criteria; s    : sB   ; op : d.operation_type:= d.eq; join : d.join_type := d.join_and )(   t
   getAdaTypeR   (   R   t   isStringR	   t   adaType(    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeCriteriaDecl:   s    
c         C   sP   g  } x: |  i  D]/ } | i o | i |  i d | i ï¿½ q q Wd i | ï¿½ S(   Nt   .s   , (   t	   variablest   isPrimaryKeyt   appendR   t   join(   R   t   pksR   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makePrimaryKeySubmitFieldsA   s    
 
#c         C   s5  | o
 d } n
 |  i  ï¿½  } t d t i d ï¿½ } |  i d j p |  i d j o | d |  i d } n, | d j o d	 |  i d } n
 |  i } |  i ï¿½  o d
 | } n d } d | d
 |  i d | } |  i ï¿½  o | d |  i	 7} n | d | _
 t |  | d ï¿½ | _ |  i | _ t
 | ï¿½ } | S(   NR   R   s   add_to_criterion.func.tmplt   BOOLEANt   ENUMs   'Pos( s    )t   Unbounded_Strings   To_String( t   make_criterion_element_s   d.make_Criterion_Elements   elem : d.Criterion := s   ( "s
   ", op, join, s   , s    is(   R   R    R   R   t
   schemaTypeR   t
   isDecimalTypeR   t   isStringTypet   sizeR   R    R   R   (   R   R   R   R   t   valuet   functionR
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeCriteriaBodyI   s(    
 
	


c         C   si   g  } x: |  i  D]/ } | i o | i | i d | i ï¿½ q q Wd i | ï¿½ } d | d |  i | S(   Ns    : s   ; s   function Retrieve_By_PK( s
    ) return (   R"   R#   R$   R   R   R%   t   adaQualifiedOutputRecord(   R   R	   R&   R   t   pkFields(    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makePKHeaderd   s    
 
#c         C   sï¿½   t  d t i d ï¿½ } t |  d ï¿½ | _ |  i | _ |  i d |  i | _	 t
 |  d d t ï¿½ | _ |  i d |  i
 | _ |  i d |  i d | _ d	 |  i d
 | _ |  i | _ t | ï¿½ } | S(   NR   s   retrieve_pk.func.tmpls    iss    : t   ct   primaryKeyOnlys    := s   .First_Element( l )s   not s   .is_empty( l )(   R    R   R   R5   t   functionHeadert   adaQualifiedListNamet   listTypeR   R3   t   variableDeclt   makeCriterionListt   Falset   primaryKeyCriteriat   adaQualifiedNullNamet
   getNullRecordt   adaQualifiedContainerNamet   getFirstRecordt   notEmptyR   (   R   R   R
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt
   makePKBodyl   s    c         C   so   t  d t i d ï¿½ } t | d ï¿½ | _ d | i d |  i | _ d | i | _	 | i | _ t
 | ï¿½ } | S(   NR   s   get_next_free.func.tmpls    iss   select max( s    ) from t
   Next_Free_(   R    R   R   t   makeNextFreeHeaderR8   R   R   t	   statementR   R   R   (   R   R   R   R
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeNextFreeFuncz   s    c         C   sx   t  d t i d ï¿½ } |  i | _ t |  d ï¿½ | _ d |  i d |  i | _ d | | _ |  i | _	 t
 | ï¿½ } | S(   NR   s   is_null.func.tmpls    iss   return s    = s   use (   R    R   R   R   t   makeIsNullFuncHeaderR8   R?   t   returnStatementt   uset   nullNameR   (   R   t   adaDataPackageNameR   R
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeIsNullFuncï¿½   s    
c         C   s   d |  i  d |  i d | S(   Ns   function Is_Null( s    : s    ) return Boolean(   R   R3   (   R   R	   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyRI   ï¿½   s    c         C   s   d |  i  | S(   Ns+   function Retrieve( c : d.Criteria ) return (   R9   (   R   R	   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeRetrieveCHeaderï¿½   s    c         C   s8   t  d t i d ï¿½ } t |  d ï¿½ | _ t | ï¿½ } | S(   NR   s   retrieve_by_c.func.tmpls    is(   R    R   R   RO   R8   R   (   R   R   R
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeRetrieveCFuncï¿½   s    c         C   s   d |  i  | S(   Ns,   function Retrieve( sqlstr : String ) return (   R9   (   R   R	   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeRetrieveSHeaderï¿½   s    c         C   s   d |  i  d |  i d | S(   Ns   procedure Save( s    : s   ; overwrite : Boolean := True )(   R   R3   (   R   R	   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeSaveProcHeaderï¿½   s    c         C   s   d |  i  d |  i d | S(   Ns   procedure Update( s    : s    )(   R   R3   (   R   R	   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeUpdateProcHeaderï¿½   s    c         C   s   d |  i  d |  i d | S(   Ns   procedure Delete( s
    : in out s    )(   R   R3   (   R   R	   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeDeleteSpecificProcHeaderï¿½   s    c         C   sb   t  d t i d ï¿½ } t |  d ï¿½ | _ t |  d d t ï¿½ | _ t |  d d t ï¿½ | _ t	 | ï¿½ S(   NR   s   update.func.tmpls    ist   pk_cR7   t   values_ct   allButPrimaryKey(
   R    R   R   RS   t   procedureHeaderR<   t   Truet
   pkCriteriat
   inputCriteriaR   (   R   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeUpdateProcBodyï¿½   s
    c         C   sï¿½   t  d t i d ï¿½ } t |  d ï¿½ | _ t |  d d t ï¿½ | _ t |  ï¿½ } |  i	 d | _
 d |  i	 d | _ d	 |  i	 d
 | _ |  i	 d |  i
 | _ |  i	 d | d
 | _ t | ï¿½ } | S(
   NR   s   save.func.tmpls    isR6   t   allt   _Tmps   if( not is_Null( s   _Tmp )) thens   Update( s    )s   _Tmp : s   _Tmp := retrieve_By_PK( (   R    R   R   RR   RX   R<   RY   t   allCriteriaR'   R   t   tmpVariablet   existsCheckt
   updateCallR3   t   tmpVariableWithAssignmentt   retrieveByPKR   (   R   R   t
   primaryKeyR
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeSaveProcBodyï¿½   s    c         C   sa   t  d t i d ï¿½ } t |  d ï¿½ | _ t |  d ï¿½ | _ |  i d |  i | _	 t
 | ï¿½ } | S(   NR   s   delete_specific.func.tmpls    isR6   s    := (   R    R   R   RT   RX   t   makePrimaryKeyCriterionR>   R   R?   t   assignToNullRecordR   (   R   R   R
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeDeleteSpecificProcBodyï¿½   s    c         C   s  t  d t i d ï¿½ } d |  i d | _ d |  i d d | _ d } xï¿½ |  i D]ï¿½ } | d	 7} t d
 d | i d } | i ï¿½  o | d
 | i d 7} n< | i	 ï¿½  o | d | i d 7} n | d | i d 7} | t
 |  i ï¿½ j  o | d 7} n | i | 7_ qR Wt | ï¿½ S(   NR   s   to_string.proc.tmpls   function To_String( rec : s    ) return String iss	   return  "s   : " &s
i    i   i   t   "s    = " & s   To_String( rec.s    )s   tio.Image( rec.s   , tio.ISO_Date )s   rec.s   'Imgs    &
(   R    R   R   R   RX   t	   returnStrR"   R   R.   t
   isDateTypet   lenR   (   R   R   t   pR   R
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeToStringBodyï¿½   s"    
 


c         C   s   d |  i  d | S(   Ns   function Next_Free_s    return integer(   R   (   R   R	   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyRF   ï¿½   s    c         C   s*   d | d |  i  d |  i d | | S(   Ns   function Retrieve_Child_s   ( s    : s
    ) return (   R   R3   (   R   t   referencingTableNamet   packagedAdaNameR	   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeChildRetrieveHeaderï¿½   s    c         C   sï¿½   t  d t i d ï¿½ } t |  | | d ï¿½ | _ d | | _ | d } g  } xH t t | i ï¿½ ï¿½ D]1 } |  i	 d t
 | i | ï¿½ } | i | ï¿½ qa Wd i | ï¿½ }	 d | d	 |	 d
 | _
 t | ï¿½ }
 |
 S(   NR   s   retrieve_child.func.tmpls    ist   Retrieve_Child_t   _IOR!   s   , s   return s   .retrieve_By_PK( s    )(   R    R   R   Rr   R8   R   t   rangeRm   t	   localColsR   R   R$   R%   RJ   R   (   R   Rp   t   listAdaNamet   fkR   t   referencePackaget   localPKRn   t	   localNamet
   localPKValuesR
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeChildRetrieveBodyï¿½   s    

 c         C   s0   d t  | ï¿½ d |  i d |  i d | | S(   Ns   function Retrieve_Associated_s   ( s    : s
    ) return (   R   R   R3   (   R   Rp   Rw   R	   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeAssociatedRetrieveHeaderï¿½   s    c         C   sï¿½   t  d t i d ï¿½ } t |  | | d ï¿½ | _ g  | _ d t | ï¿½ | _ | d } d | d | _ xx t	 t
 | i ï¿½ ï¿½ D]a } t | i | ï¿½ } t | i
 | ï¿½ } | d | d	 |  i d
 | d }	 | i i |	 ï¿½ q{ Wt | ï¿½ }
 |
 S(   NR   s   retrieve_associated.func.tmpls    ist   Retrieve_Associated_Rt   s   return s   .retrieve( c )s   .Add_s   ( c, R!   s    )(   R    R   R   R~   R8   R_   R   R   RJ   Ru   Rm   Rv   R   t   foreignColsR   R$   R   (   R   Rp   Rw   Rx   R   Ry   Rn   R{   t   foreignNamet   critR
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeAssociatedRetrieveBodyï¿½   s    	
 %c
      C   sï¿½  t  i | i d i ï¿½  } t | d ï¿½ } t d t  i d ï¿½ } | i d | _ g  | _ | i	 | _
 g  | _ g  | _ xï¿½ | i
 D]ï¿½ } | i i t | d ï¿½ ï¿½ | i i t | t d ï¿½ ï¿½ | i ï¿½  o  | i i t | t d ï¿½ ï¿½ n | i o. | i ï¿½  o | i i t | d ï¿½ ï¿½ q qï¿½ qï¿½ Wt | d ï¿½ | _ t | d ï¿½ | _ t | d ï¿½ | _ t | d ï¿½ | _ t | d ï¿½ | _  t! | d ï¿½ | _" | i# | _$ | i | _% g  | _& t' i' i( ï¿½  | _) xï¿½ | i* D]ï¿½ } | i* | } t+ | ï¿½ } | i, o7 |  d | }	 t- | | |	 d ï¿½ }
 | i& i |
 ï¿½ qï¿½|  d | d } t. | | | d ï¿½ } | i& i | ï¿½ qï¿½W|  | _/ | i0 t1 | ï¿½ ï¿½ | i2 ï¿½  d  S(	   Ns   _io.adst   wR   s   io.ads.tmplRt   t   ;R!   s   _List.Vector(3   R   t   srcDirR   t   lowerR   R    R   t   IONamet   criteriaR?   RL   t   orderingStatementst   incr_integer_pk_fieldsR"   R$   R   R    R=   R.   RY   R#   t
   isIntegerTypeRF   R5   t   pkFuncRI   t
   isNullFuncRO   t   retrieveByCFuncRQ   t   retrieveBySFuncRR   t   saveFuncRT   t   deleteSpecificFuncR3   t   outputRecordTypet   outputRecordNamet
   associatedt   datetimet   nowt   datet   childRelationsR   t
   isOneToOneRr   R~   t   dataPackageNamet   writeR   t   close(
   Rï¿½   R   t   outfileNamet   outfileR   R   R   Rx   Rp   Rq   t	   childFuncRw   t	   assocFunc(    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   make_io_ads
  sR    			
 
 

%	
 

	c         C   s
  g  } d } d } xï¿½ |  i  D]ï¿½ } | i | i ï¿½ | d 7} | d d j o{ | t d d d i | ï¿½ 7} | t |  i  ï¿½ j  o | d 7} n | d 7} | t |  i  ï¿½ j  o | d	 7} n g  } q q Wt | ï¿½ d j o' | t d d d i | ï¿½ d
 7} n | S(   NR   i    i   i
   i   Rj   s   , t   ,s    &
s    "(   R"   R$   R   R   R%   Rm   (   R   t   selectsR
   Rn   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   sqlVariablesList9  s$    
 

'c         C   s   d |  i  d } | S(   Ns.   DELETE_PART : constant String := "delete from s    "(   R   (   R   R
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeDeletePartStringL  s    c         C   sE   d d } | t  |  ï¿½ 7} | d 7} | t d d |  i d 7} | S(   Ns,   SELECT_PART : constant String := "select " &s
s    &
i   s   "from s    " (   Rï¿½   R   R   (   R   R
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeSelectPartStringQ  s
    

c         C   sE   d |  i  d d } | t |  ï¿½ 7} | d 7} | t d d 7} | S(   Ns.   INSERT_PART : constant String := "insert into s    (" &s
s    &
i   s
   " ) values " (   R   Rï¿½   R   (   R   R
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeInsertPartStringX  s
    
c         C   s   d |  i  d } | S(   Ns)   UPDATE_PART : constant String := "update s    set  "(   R   (   R   R
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeUpdatePartString_  s    c         C   sï¿½   g  } xï¿½ |  i  D]ï¿½ } | d j p/ | d j o
 | i p | d j ob | i oW | i } | o |  i d | } n d | i d | d | d } | i | ï¿½ q q W| S(	   sï¿½
         table,
         criterionName,
         includeAll,
         qualifyVarname - add the ada table name to each entry
        R]   R7   RW   R!   R
   s   ( s   , s    )(   R"   R#   R   R$   (   R   t
   criterionNamet
   includeAllt   qualifyVarnamet   lR   R   t   critElement(    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyR<   d  s    
 
	!c         C   s   t  |  | d t ï¿½ S(   NR7   (   R<   RY   (   R   Rï¿½   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyRg   w  s    c         C   sï¿½  |
} | i  ï¿½  ox t d d } | t d d 7} | t d d | d 7} | t d d | i d 7} | t d d	 | i d
 7} n%| i ï¿½  oï¿½ |  i } t d d } | t d d 7} | t d d | d 7} | t d d | d 7} | t d d
 | i d 7} | t d d | i d 7} | t d d | i d
 7} n`| i ï¿½  oï¿½ t d d } | t d d 7} | t d d 7} | t d d | d 7} | t d d
 | i d 7} | t d d 7} | t d d | i d
 7} nï¿½ | i ï¿½  oï¿½ t d d } | t d d 7} | t d d 7} | t d d | d 7} | t d d
 | i d 7} | t d d 7} | t d d | i d
 7} n d | i } | S(   sï¿½
         ODBC binding declarations for each type we support,

         The rules here come from much trial end error and digging around on
         the microsoft ODBC site.
        i   s    dodbc.I_Out_Binding.SQLBindCol(
i   s   StatementHandle  => ps,
s   ColumnNumber     => s   ,
s   TargetValue      => s	   'access,
s   IndPtr           => s
   _len'access )s   SQLBindCol(
s   TargetType       => s#   TargetValuePtr   => To_SQLPOINTER( s   _access.all'address ),
s   BufferLength     => s   _len,
s   StrLen_Or_IndPtr => s"   TargetType       => SQL_C_DOUBLE,
s   BufferLength     => 0,
s*   TargetType       => SQL_C_TYPE_TIMESTAMP,
s   FIXME: MISSED BINDING FOR VAR (   t   isIntegerTypeInODBCR   R   R.   t   supportedSqlCharTypet
   isNumericTypeRl   R   (   t   databaseAdapterR   t   post   posStrt   bindingt   charType(    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeBinding{  sD    
!
	!
!
!
c         C   sI  t  d t i d ï¿½ } t |  d ï¿½ | _ |  i | _ |  i d |  i | _	 |  i
 d |  i d | _ g  | _ g  | _
 g  | _ g  | _ g  | _ d } xï¿½|  i D]ï¿½} | d 7} | i d	 | i } | i ï¿½  o' | d
 t d d t | i ï¿½ ï¿½ 7} n | i i | ï¿½ | i d
 | i d } | i i | ï¿½ t | i | | ï¿½ } | i i | ï¿½ | i ï¿½  p | i ï¿½  p
 | i ï¿½  o| i ï¿½  oJ | i d | i d } |  i d | i d | i d | i d }	 nM | i ï¿½  o? | i d | i d } |  i d | i d | i d }	 n | i ï¿½  oJ |  i d | i d | i d | i d }	 | i d | i d } n | i
 i | ï¿½ nï¿½ | i d j o2 |  i d | i d
 | i d | i d }	 nW | i d j o' |  i d | i d | i d }	 n  |  i d | i d
 | i }	 | i i |	 ï¿½ qï¿½ Wt | ï¿½ }
 |
 S(   sï¿½
         table - Table class from table_model.py
         database - complete enclosuing Database model from  table_model.py

         Make a fuction that, for a given table (say 'fred'), takes an sql string as input (just the query part)
         and returns a single
         list of fred records (fred_list, as declared in the main database declarations ads file).
         This version has wide_string handling jammed off
         Structure is:
            - declare local versions of all fred's variables
            - declare aliases (pointers) to these variables, where needed
            - declare length holders for each one
            - make the query by appending the query part to a constant 'select part'
            - prepare the query
            - bind variables/aliase
            - execute
            - loop round, map the locals to one record
            --    add the variable to the collection

         There's a certain amount of trial an error in this..
        R   s   retrieve_wstr.func.tmpls    iss    : s   .append( l, s    )i    i   s
   : aliased s    := i   t   @s   _len : aliased SQLINTEGER := s   'Sizes   _access : Real_Access := s   'accessR!   s   := s   ( s
   _access.all )s   _access : Timestamp_Access := s    := dodbc.Timestamp_To_Ada_Time( s    := Slice_To_Unbounded( s   , 1, Natural( s   _len ) )s   _access : String_Access := R)   s   'Val( R(   s    := Boolean'Val( (   R    R   R   RQ   R8   R9   R:   R   R3   R;   RA   t   addToMapt   aliasDeclarationst   pointerst   lenDeclarationst   mappingsFromAliasToRecordt   bindingsR"   t   odbcTypeR.   R   t   intR/   R$   Rï¿½   Rï¿½   t   isRealOrDecimalTypeRl   R   R,   R   (   R   t   databaseR   Rï¿½   R   t   aliast   len_declRï¿½   t   pointert   mappingR
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeRetrieveSFuncï¿½  sR    					
 

''
2
'
.2'c   
   C   s1  t  i | i d i ï¿½  } t | d ï¿½ } t d t  i d ï¿½ } t | ï¿½ | _ t	 | ï¿½ | _
 t | ï¿½ | _ t
 | ï¿½ | _ | i d | _ g  | _ | i | _ g  | _ g  | _ g  | _ g  | _ x7 | i D], } d | d | d } | i i | ï¿½ qï¿½ Wxï¿½ | i D]ï¿½ } | i i t | ï¿½ ï¿½ | i i t | ï¿½ ï¿½ | i ï¿½  o | i i t | t ï¿½ ï¿½ n | i o. | i ï¿½  o | i i t  | | ï¿½ ï¿½ qï¿½qqWt! | ï¿½ | _" t# | |  i$ ï¿½ | _% t& | ï¿½ | _' t( | |  ï¿½ | _) t* | ï¿½ | _+ t, | ï¿½ | _- t. | ï¿½ | _/ | i0 | _1 | i | _2 g  | _3 t4 i4 i5 ï¿½  | _6 xï¿½ | i7 D]ï¿½ } | i7 | }	 t8 | ï¿½ }
 | i i |
 d ï¿½ |	 i9 o: |  i$ d	 |
 } t: | |
 | |	 ï¿½ } | i3 i | ï¿½ qO|  i$ d	 |
 d
 }
 t; | |
 |
 |	 ï¿½ } | i3 i | ï¿½ qOW|  i$ | _< | i= t> | ï¿½ ï¿½ | i? ï¿½  d S(   sï¿½
         Make the adb (ada body) file for the io procs given table e.g. fred_io.adb into src/
         table - Table class from table_model.py
         database - complete enclosuing Database model from  table_model.py
        s   _io.adbRï¿½   R   s   io.adb.tmplRt   s    function make_criterion_element_s*    is new d.Make_Decimal_Criterion_Element( s    )R!   s   _List.VectorN(@   R   Rï¿½   R   Rï¿½   R   R    R   Rï¿½   t
   selectPartRï¿½   t
   insertPartRï¿½   t
   deletePartRï¿½   t
   updatePartRï¿½   Rï¿½   R?   RL   Rï¿½   Rï¿½   t
   localWithst   decimalDeclarationst   decimalTypesR$   R"   R2   R   R.   RY   R#   Rï¿½   RH   RD   Rï¿½   RN   RM   Rï¿½   RP   Rï¿½   Rï¿½   Rï¿½   R\   t
   updateFuncRf   Rï¿½   Ri   Rï¿½   R3   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   R   Rï¿½   R}   Rï¿½   Rï¿½   Rï¿½   R   Rï¿½   (   Rï¿½   R   Rï¿½   Rï¿½   R   t   dect   gentypeR   R   Rx   Rp   Rq   Rï¿½   Rw   Rï¿½   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   make_io_adbï¿½  sj    					
 
 


%	
 

c         C   s5   x. |  i  D]# } t |  i | ï¿½ t |  | ï¿½ q
 Wd S(   s9
        database - complete enclosuing Database model from  table_model.py

        Make all the records needed to handle writing to and from the database
        there is one ads/adb pair per table in the database; for a table 'fred'
        these are fred_io.ads and fred_io.adb
         Write to src/
        N(   t   tablesRï¿½   RM   Rï¿½   (   Rï¿½   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeIO&  s
 c         C   s    |  i  d |  i d |  i ï¿½  S(   sx
        var - Variable class from table_model.py
        Declaration for a single element in a record
        s    : s    := (   R   R   t   getDefaultAdaValue(   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeSingleAdaRecordElement3  s    c         C   sï¿½   t  d d } | t  d d |  i d |  i t  d 7} | t  d d 7} | t  d d |  i d 7} | t  d d	 |  i d
 7} | t  d d 7} | S(   s
         table - Table class from table_model.py
         Ada containers package declaration for a table; if table name is 'fred' gives you:
         'package fred_list is new Ada.Containers.Vectors( element_type=>fred, index_type=>Positive );
         (plus some comments)
        i   s   --
s   -- container for s    : s
s   package s    is new Ada.Containers.Vectors
i   s   (Element_Type => s   ,
s   Index_Type => Positive );
(   R   R   t   descriptiont	   MAXLENGTHt   adaContainerNameR   (   R   R
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeContainerPackage:  s    ,c         C   s   t  |  ï¿½ d |  d S(   sï¿½
        adaName - a string like Variable_One
        Return a declaration for a list of some type; something like 'freds : fred_List.vector'
        s    : s   _List.Vector(   R   (   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeChildCollectionI  s    c         C   s,  t  d d } | t  d d |  i d |  i t  d 7} | t  d d 7} | t  d d |  i d 7} x- |  i D]" } | t  d t | ï¿½ d	 7} qs Wxz |  i D]o } |  i | } t | ï¿½ } | i	 o* | t  d | d
 | d | d	 7} qï¿½ | t  d t
 | ï¿½ d	 7} qï¿½ W| t  d d 7} | S(
   sï¿½
         table - Table class from table_model.py
        Make the Ada record declaration for the given table. See table_model.py for the (very limited)  b
        xml=>sql=>ada type mappings and defaults.
        i   s   --
s   -- record modelling s    : s
s   type s    is record
i   s   ;
s   _Child :s	    := Null_s   end record;
(   R   R   Rï¿½   Rï¿½   R   R"   Rï¿½   Rï¿½   R   Rï¿½   Rï¿½   (   R   R
   R   R   Rx   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt
   makeRecordP  s     ,
  
 

* c         C   su   t  d d } | t  d d |  i d |  i t  d 7} | t  d d 7} | t  d d |  i d | d 7} | S(   Ni   s   --
s   -- simple print routine for s    : s
s   function To_String( rec : s    ) return String(   R   R   Rï¿½   Rï¿½   R   (   R   R	   R
   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeToStringDeclg  s
    ,%c      	   C   s\  t  d d } | t  d d |  i d |  i t  d 7} | t  d d 7} | t  d |  i d |  i d 7} g  } x7 |  i D], } | i t  d | i d	 | i ï¿½  ï¿½ qï¿½ Wx| |  i	 D]q } |  i	 | } t
 | ï¿½ } | i o! | i t  d | d
 | ï¿½ qï¿½ | i t  d t | ï¿½ d	 | d ï¿½ qï¿½ W| d i
 | ï¿½ 7} | d t  d d
 7} | S(   su
        Make a record that signals, effectively, Null, with some unlikely values for the primary key fields
        i   s   --
s   -- default value for s    : s
s    : constant s    := (
i   s    => s   _Child => Null_s   _List.Empty_Vectors   ,
s   );
(   R   R   Rï¿½   Rï¿½   t   adaNullNameR   R"   R$   Rï¿½   Rï¿½   R   Rï¿½   R   R%   (   R   R
   t   elemsR   R   Rx   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeDefaultRecordDeclo  s$    ,$
 *
 

!+c         C   sï¿½   |  i  } | i ï¿½  g  } xZ | D]R } t | ï¿½ } | t | ï¿½ 7} | t | ï¿½ 7} | t | d ï¿½ 7} | i | ï¿½ q! Wt t i	 |  i
 i d d ï¿½ } t d t i
 d ï¿½ } | | _ |  i | _ t i i ï¿½  | _ | i t | ï¿½ ï¿½ | i d S(   sï¿½
         Write a .ads file containing all the data records and container declarations
         writes to a file <database_name>_data.ads in the src output directory.
        Rï¿½   s	   _data.adsRï¿½   R   s
   data.ads.tmplN(   Rï¿½   t   reverseRï¿½   Rï¿½   Rï¿½   Rï¿½   R$   R   R   Rï¿½   t
   dataSourceRï¿½   R    R   t   recordsRM   R   Rï¿½   Rï¿½   Rï¿½   Rï¿½   R   Rï¿½   (   Rï¿½   t   rtabsRï¿½   R   t   recordRï¿½   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeDataADSï¿½  s"    

  	c         C   sï¿½   |  i  } | i ï¿½  t d t i d ï¿½ } g  | _ |  i | _ t i i	 ï¿½  | _
 x$ | D] } | i i t | ï¿½ ï¿½ qX Wt
 t i |  i i d d ï¿½ } | i t | ï¿½ ï¿½ | i d S(   sï¿½
         Write a .ads file containing all the data record and container declarations
         writes to a file <database_name>_data.adb in the src output directory.
        R   s
   data.adb.tmpls	   _data.adbRï¿½   N(   Rï¿½   Rï¿½   R    R   R   t	   toStringsRM   R   Rï¿½   Rï¿½   Rï¿½   R$   Ro   R   Rï¿½   Rï¿½   Rï¿½   Rï¿½   R   Rï¿½   (   Rï¿½   Rï¿½   R   R   Rï¿½   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeDataADBï¿½  s    

	  c         C   so   t  t i d d ï¿½ } t d t i d ï¿½ } |  i d | _ t i i ï¿½  | _	 | i
 t | ï¿½ ï¿½ | i ï¿½  d S(   sï¿½
         Write an ads file with calls for getting passwords, usernames, database name
         writes to src/environment.ads.
        s   environment.adsRï¿½   R   s   environment.ads.tmplt   _db_environmentN(
   R   R   Rï¿½   R    R   Rï¿½   t	   unit_nameRï¿½   Rï¿½   Rï¿½   Rï¿½   R   Rï¿½   (   t   runtimeRï¿½   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeEnvironmentADSï¿½  s    c         C   sï¿½   t  t i d d ï¿½ } t d t i d ï¿½ } |  i d | _ |  i | _ |  i | _ |  i | _ t	 i	 i
 ï¿½  | _ | i t
 | ï¿½ ï¿½ | i ï¿½  d S(   sï¿½
         Write an adb file with calls for getting passwords, usernames, database name
         writes to src/environment.adb.
        s   environment.adbRï¿½   R   s   environment.adb.tmplRï¿½   N(   R   R   Rï¿½   R    R   Rï¿½   Rï¿½   t   passwordt   usernameRï¿½   Rï¿½   Rï¿½   Rï¿½   R   Rï¿½   (   Rï¿½   Rï¿½   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeEnvironmentADBï¿½  s    c         C   sï¿½   t  t i d d ï¿½ } t d t i d ï¿½ } g  } x' |  i i ï¿½  D] } | i | i ï¿½ qB W| | _	 g  } x' |  i
 i ï¿½  D] } | i | i ï¿½ q{ W| | _ t i i
 ï¿½  | _ | i t | ï¿½ ï¿½ | i ï¿½  d S(   sï¿½
         Add declarations for any decimal types and enumerations to
         an ads file already containing some package defintions, aliases,
         and string types used throughout the output.
         writes to src/base_types.ads
        s   base_types.adsRï¿½   R   s   base_types.ads.tmplN(   R   R   Rï¿½   R    R   Rï¿½   t   valuesR$   t   toAdaStringt   decimal_repst   enumeratedTypest	   enum_repsRï¿½   Rï¿½   Rï¿½   Rï¿½   R   Rï¿½   (   Rï¿½   Rï¿½   R   t   decst   dt   enumst   e(    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeBaseTypesADSï¿½  s     	 	c          C   s_   t  t i d d ï¿½ }  t d t i d ï¿½ } t i i ï¿½  | _ |  i t	 | ï¿½ ï¿½ |  i
 ï¿½  d S(   sV
        Write a body for the common types declarations to src/base_types.adb
        s   base_types.adbRï¿½   R   s   base_types.adb.tmplN(   R   R   Rï¿½   R    R   Rï¿½   Rï¿½   Rï¿½   Rï¿½   R   Rï¿½   (   Rï¿½   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeBasicTypesADBï¿½  s
    c          C   sï¿½   d d d g }  d d g } xï¿½ |  D]ï¿½ } xï¿½ | D]} } t  t i | d | d ï¿½ } t d t i d	 | d | d d
 ï¿½ } t i i ï¿½  | _ | i t	 | ï¿½ ï¿½ | i
 ï¿½  q/ Wq" Wd S(   sï¿½
        Write versions of support files db_commons, db_commons-odbc and logger to src/
        We just add some headers to each; otherwise they're uncustomised.
        t
   db_commonss   db_commons-odbct   loggert   adbt   adsR!   Rï¿½   R   R   t   tmplN(   R   R   Rï¿½   R    R   Rï¿½   Rï¿½   Rï¿½   Rï¿½   R   Rï¿½   (   t   targetst   extst   targett   extRï¿½   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeCommonsï¿½  s      *c         C   sï¿½   t  t i |  i i d d ï¿½ } t d t i d ï¿½ } t |  i i d ï¿½ | _ t	 i	 i
 ï¿½  | _ | i t
 | ï¿½ ï¿½ | i ï¿½  d S(   s0
         Write an  test case ads file
        s	   _test.adsRï¿½   R   s   test_case.ads.tmplt   _testN(   R   R   t   testsDirRï¿½   Rï¿½   R    R   R   t   testNameRï¿½   Rï¿½   Rï¿½   Rï¿½   R   Rï¿½   (   Rï¿½   Rï¿½   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   writeTestCaseADSï¿½  s     c         C   s   d S(   NR   (    (   t   databaseNameR   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeChildTests  s    c         C   s  t  d t i d ï¿½ } | i d } | i d } | i d } | i d } d | d | _ | | _ | d	 | i | _ | d	 | i	 | _
 d
 | d | _ | i d | _ | d
 | i d | _
 d | d | _ | d
 | i d | _ | i d | d | _ g  | _ g  | _ g  | _ | i d | d | _ | i d | d | _ | i d | d | _ | d
 | i d | d | _ xï¿½| i D]~} | i oa | i ï¿½  o | d | i d } n( | d | i d
 | i d | i } | i i | ï¿½ qï¿½d | d }	 | i ï¿½  oU d | i }
 | d | i d  |
 d! }	 | i i | d | i d" |
 d! ï¿½ nï¿½ | i ï¿½  o | d | i d# }	 nh | i ï¿½  o | d | i d$ }	 nB | i ï¿½  o4 d% t  | i! ï¿½ d& } | d | i d
 | }	 n | i i |	 ï¿½ qï¿½Wt" | ï¿½ S('   s(
         Write an create test
        R   s   create_test.proc.tmplt   _Create_Testt
   _Test_Itemt
   _test_lists   .Cursors
   procedure s3   (  T : in out AUnit.Test_Cases.Test_Case'Class ) iss    : s   procedure Print( pos : s    ) is s   _io.Delete( criteria )s    := s   .element( pos )s   Logger.info( To_String( s    ))s   .Retrieve( criteria )s
   .iterate( s   , print'Access )s
   _io.Save( s	   , False )s    )s   _io.Delete( s
   .element( s   , i )R!   s'    := To_Unbounded_String( "k_" & i'img )s   _io.Next_Free_s
   -- missings
    declaration s   dat fors    := To_Unbounded_String("s   ")s"    := To_Unbounded_String("Altered::s    := Ada.Calendar.Clocks    := 1010100.012s   10201.t   1(#   R    R   R   R   Rï¿½   RX   t   procNameR3   t   variableDeclarationR9   t   listDeclarationt   printHeadert
   clearTablet   retrieveUsert   toStringt   adaIOPackageNamet   completeListStatementt   iteratet   createKeyStatementst   createDataStatementst   modifyDataStatementst
   saveStatementt   updateStatementt   deleteStatementt   elementFromListR"   R#   R.   R$   Rl   t   isFloatingPointTypeR-   Rï¿½   t   scaleR   (   R	  R   R   R  R   t   listnamet   cursorR   t   keyt   assignt   datat   v(    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   makeCreateTest	  sV    



				 
 

'

+


c         C   sï¿½  t  t i |  i i d d ï¿½ } t d t i d ï¿½ } t |  i i d ï¿½ | _ t |  i i d ï¿½ | _	 g  | _
 g  | _ g  | _ g  | _
 g  | _ xï¿½ |  i D]ï¿½ } | i
 i | i d ï¿½ | i i d | i d	 d
 | i d ï¿½ | i
 i t |  i i | ï¿½ ï¿½ t | i ï¿½ d j oM | i i d | i d
 d | i d ï¿½ | i i t |  i i | ï¿½ ï¿½ qï¿½ qï¿½ Wt i i ï¿½  | _ | i t | ï¿½ ï¿½ | i ï¿½  d S(   s0
         Write an  test case ads file
        s	   _test.adbRï¿½   R   s   test_case.adb.tmplR  t   _DataRt   s   Register_Routine (T, s   _Create_Test'Access, s"   "Test of Creation and deletion of s   " );i    s   _Child_Retrieve_Test'Access, s   "Test of Finding Children of N(   R   R   R  Rï¿½   Rï¿½   R    R   R   R  t   datapackaget
   dbPackagest   createRegisterst   childRegisterst   createTestst
   childTestsRï¿½   R$   R   R(  Rm   Rï¿½   R
  Rï¿½   Rï¿½   Rï¿½   Rï¿½   R   Rï¿½   (   Rï¿½   Rï¿½   R   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   writeTestCaseADB@  s(     					
 **'c         C   sï¿½   t  t i d d ï¿½ } t d t i d ï¿½ } t |  i i d ï¿½ | _ t |  i i d ï¿½ | _	 t
 i
 i ï¿½  | _ | i
 t | ï¿½ ï¿½ | i ï¿½  d S(   sB
         Write the exe file bit (adb) for the test case
        s	   suite.adbRï¿½   R   s   suite.adb.tmplt   _Tests   _test.Test_CaseN(   R   R   R  R    R   R   Rï¿½   Rï¿½   t   testFilet   testCaseRï¿½   Rï¿½   Rï¿½   Rï¿½   R   Rï¿½   (   Rï¿½   Rï¿½   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt
   writeSuiteADBX  s    c          C   s_   t  t i d d ï¿½ }  t d t i d ï¿½ } t i i ï¿½  | _ |  i t	 | ï¿½ ï¿½ |  i
 ï¿½  d  S(   Ns   harness.adbRï¿½   R   s   harness.adb.tmpl(   R   R   R  R    R   Rï¿½   Rï¿½   Rï¿½   Rï¿½   R   Rï¿½   (   Rï¿½   R   (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pyt   writeHarnessd  s
    (I   t   __doc__t   Cheetah.TemplateR    Rï¿½   t   pathsR   t   table_modelR   t   utilsR   R   R   R   Rï¿½   R   R   R   R   R    R'   R=   R2   R5   RD   RH   RN   RI   RO   RP   RQ   RR   RS   RT   R\   Rf   Ri   Ro   RF   Rr   R}   R~   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   R<   Rg   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   Rï¿½   R  R  R
  R(  R0  R4  R5  (    (    (    s5   /users/info/profs/culet/mill/scripts/ada_generator.pys   <module>   sï¿½   "								
									
							/								+	B	>
								
		
				7	